Check Linux Kernel Version

$ pacman -Qi linux

Check cached packages

$ vim /var/cache/pacman/pkg

Downgrade Kernel

$ pacman -U /var/cache/pacman/pkg/linux-1.4.1-1-x86_64.pkg.tar.xz /var/cache/pacman/pkg/linux-headers-1.4.1-1-x86_64.pkg.tar.xz


List of kernels:

linux-4.0.4-2-x86_64.pkg.tar.xz
linux-4.0.6-1-x86_64.pkg.tar.xz
linux-4.1.2-2-x86_64.pkg.tar.xz
linux-4.1.3-1-x86_64.pkg.tar.xz
linux-4.1.4-1-x86_64.pkg.tar.xz
linux-4.1.5-1-x86_64.pkg.tar.xz
linux-4.1.6-1-x86_64.pkg.tar.xz
linux-4.2.1-1-x86_64.pkg.tar.xz
linux-4.2.2-1-x86_64.pkg.tar.xz

linux-lts-4.1.8-1-x86_64.pkg.tar.xz
linux-lts-4.1.9-2-x86_64.pkg.tar.xz

Check dependencies of a package:

$ pacman -Qi package_name

Check dependencies of a package:

$ pacman -Qtd package_name

Remove a package:

$ pacman -R package_name

To search for already installed packages:

$ pacman -Qs string1 string2 ...

To display extensive information about a given package:

$ pacman -Si package_name

For locally installed packages:

$ pacman -Qi package_name

Passing two -i flags will also display the list of backup files and their modification states:

$ pacman -Qii package_name

To retrieve a list of the files installed by a package:

$ pacman -Ql package_name

For packages not installed, use pkgfile.

To verify the presence of the files installed by a package:

$ pacman -Qk package_name

Passing the k flag twice will perform a more thorough check.

One can also query the database to know which package a file in the file system belongs to:

$ pacman -Qo /path/to/file_name

To list all packages no longer required as dependencies (orphans):

$ pacman -Qdt

To list all packages explicitly installed and not required as dependencies:

$ pacman -Qet

List all foreign packages.

$ pacman -Qm
